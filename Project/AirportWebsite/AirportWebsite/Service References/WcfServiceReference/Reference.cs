//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AirportWebsite.WcfServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WcfPlane", Namespace="http://schemas.datacontract.org/2004/07/WcfDemo")]
    [System.SerializableAttribute()]
    public partial class WcfPlane : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrentPositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string companyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string currentStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string directionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int planeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string planeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int speedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string typeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentPosition {
            get {
                return this.CurrentPositionField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentPositionField, value) != true)) {
                    this.CurrentPositionField = value;
                    this.RaisePropertyChanged("CurrentPosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string city {
            get {
                return this.cityField;
            }
            set {
                if ((object.ReferenceEquals(this.cityField, value) != true)) {
                    this.cityField = value;
                    this.RaisePropertyChanged("city");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string company {
            get {
                return this.companyField;
            }
            set {
                if ((object.ReferenceEquals(this.companyField, value) != true)) {
                    this.companyField = value;
                    this.RaisePropertyChanged("company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string currentState {
            get {
                return this.currentStateField;
            }
            set {
                if ((object.ReferenceEquals(this.currentStateField, value) != true)) {
                    this.currentStateField = value;
                    this.RaisePropertyChanged("currentState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string direction {
            get {
                return this.directionField;
            }
            set {
                if ((object.ReferenceEquals(this.directionField, value) != true)) {
                    this.directionField = value;
                    this.RaisePropertyChanged("direction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int planeID {
            get {
                return this.planeIDField;
            }
            set {
                if ((this.planeIDField.Equals(value) != true)) {
                    this.planeIDField = value;
                    this.RaisePropertyChanged("planeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string planeName {
            get {
                return this.planeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.planeNameField, value) != true)) {
                    this.planeNameField = value;
                    this.RaisePropertyChanged("planeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int speed {
            get {
                return this.speedField;
            }
            set {
                if ((this.speedField.Equals(value) != true)) {
                    this.speedField = value;
                    this.RaisePropertyChanged("speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string type {
            get {
                return this.typeField;
            }
            set {
                if ((object.ReferenceEquals(this.typeField, value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfServiceReference.IAirportManager")]
    public interface IAirportManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportManager/retrievePlanesByCompanyL", ReplyAction="http://tempuri.org/IAirportManager/retrievePlanesByCompanyLResponse")]
        AirportWebsite.WcfServiceReference.WcfPlane[] retrievePlanesByCompanyL(int companyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportManager/retrievePlanesByCompanyL", ReplyAction="http://tempuri.org/IAirportManager/retrievePlanesByCompanyLResponse")]
        System.Threading.Tasks.Task<AirportWebsite.WcfServiceReference.WcfPlane[]> retrievePlanesByCompanyLAsync(int companyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportManager/findCollision", ReplyAction="http://tempuri.org/IAirportManager/findCollisionResponse")]
        AirportWebsite.WcfServiceReference.WcfPlane[] findCollision();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportManager/findCollision", ReplyAction="http://tempuri.org/IAirportManager/findCollisionResponse")]
        System.Threading.Tasks.Task<AirportWebsite.WcfServiceReference.WcfPlane[]> findCollisionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAirportManagerChannel : AirportWebsite.WcfServiceReference.IAirportManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AirportManagerClient : System.ServiceModel.ClientBase<AirportWebsite.WcfServiceReference.IAirportManager>, AirportWebsite.WcfServiceReference.IAirportManager {
        
        public AirportManagerClient() {
        }
        
        public AirportManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AirportManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AirportManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AirportManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AirportWebsite.WcfServiceReference.WcfPlane[] retrievePlanesByCompanyL(int companyID) {
            return base.Channel.retrievePlanesByCompanyL(companyID);
        }
        
        public System.Threading.Tasks.Task<AirportWebsite.WcfServiceReference.WcfPlane[]> retrievePlanesByCompanyLAsync(int companyID) {
            return base.Channel.retrievePlanesByCompanyLAsync(companyID);
        }
        
        public AirportWebsite.WcfServiceReference.WcfPlane[] findCollision() {
            return base.Channel.findCollision();
        }
        
        public System.Threading.Tasks.Task<AirportWebsite.WcfServiceReference.WcfPlane[]> findCollisionAsync() {
            return base.Channel.findCollisionAsync();
        }
    }
}
